<!DOCTYPE html>
<html lang="zh-Hant">
<head>
  <meta charset="UTF-8">
  <title>我愛真冬</title>
  <style>
    body {
      margin: 0;
      font-family: 'Noto Serif TC', serif;
      background: linear-gradient(to bottom, #fffaf0, #e0ffd4);
      color: #3a3a3a;
      text-align: center;
      min-height: 100vh;
    }

    #intro-screen, #game-screen {
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      background-color: black;
      color: #ff69b4;
      z-index: 9999;
    }

    #intro-text {
      font-size: 3em;
      font-weight: bold;
      animation: glow 1s ease-in-out infinite alternate;
    }

    #enter-button, .button, #restart-button {
      margin-top: 30px;
      padding: 12px 24px;
      font-size: 1.2em;
      background-color: #ff69b4;
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      box-shadow: 0 5px 15px rgba(255, 105, 180, 0.5);
      transition: background-color 0.3s;
    }

    #enter-button:hover, .button:hover, #restart-button:hover {
      background-color: #ff1493;
    }

    @keyframes glow {
      from { text-shadow: 0 0 10px #ff69b4, 0 0 20px #ff69b4; }
      to { text-shadow: 0 0 20px #ff1493, 0 0 30px #ff1493; }
    }

    .main-content {
      display: none;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    h1 {
      font-size: 3em;
      margin: 20px 0;
      color: #6a4b8a;
    }

    .image-container {
      max-width: 90%;
      width: 500px;
      border-radius: 16px;
      overflow: hidden;
      box-shadow: 0 10px 25px rgba(0,0,0,0.15);
      margin-bottom: 15px;
    }

    img {
      width: 100%;
      display: block;
    }

    .comment {
      font-size: 1.2em;
      margin: 10px 0 20px;
    }

    .popup {
      position: fixed;
      top: 30%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: white;
      padding: 20px 30px;
      border-radius: 10px;
      box-shadow: 0 10px 25px rgba(0,0,0,0.2);
      font-size: 1.5em;
      display: none;
    }

    #play-area {
      position: relative;
      width: 800px;
      height: 300px;
      background-color: #fff;
      border: 2px solid #888;
      overflow: hidden;
      display: none;
      margin: 20px auto;
      background-image: url('background.png'); /* 新增背景圖片 */
      background-repeat: repeat-x;
      background-position: 0 0;
      animation: backgroundScroll 20s linear infinite; /* 背景滾動動畫 */
    }

    @keyframes backgroundScroll {
      from { background-position: 0 0; }
      to { background-position: -1600px 0; }
    }

    #character {
      position: absolute;
      bottom: 0;
      left: 50px;
      width: 60px;
      height: 60px;
      background-color: #4a90e2;
      border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%;
      animation: running 0.5s infinite alternate;
    }

    @keyframes running {
      0% { 
        transform: scaleX(1) scaleY(1);
        border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%;
      }
      100% { 
        transform: scaleX(0.9) scaleY(1.1);
        border-radius: 45% 55% 45% 55% / 65% 55% 45% 35%;
      }
    }

    #character.jumping {
      animation: none;
      border-radius: 50%;
    }

    #character.collision {
      animation: collision 0.5s ease-out;
    }

    @keyframes collision {
      0% { 
        background-color: #4a90e2;
        transform: scale(1);
      }
      50% { 
        background-color: #ff4757;
        transform: scale(1.2);
      }
      100% { 
        background-color: #4a90e2;
        transform: scale(1);
      }
    }

    .obstacle {
      position: absolute;
      bottom: 0;
      border-radius: 4px;
      transition: all 0.1s ease;
    }

    .obstacle.hit {
      animation: obstacleHit 0.3s ease-out;
    }

    @keyframes obstacleHit {
      0% { transform: scale(1); }
      50% { transform: scale(1.1); }
      100% { transform: scale(1); }
    }

    #score {
      font-size: 1.2em;
      margin: 10px;
    }
  </style>
</head>
<body>

<div id="intro-screen">
  <div id="intro-text">長青太惡毒辣</div>
  <button id="enter-button" onclick="enterSite()">進入主畫面</button>
</div>

<div class="main-content" id="main-content">
  <div id="popup" class="popup">做這網站的人想必是天才吧</div>
  <h1>我愛真冬</h1>
  <div class="image-container">
    <img src="1000021154.jpg" alt="我愛真冬">
  </div>
  <div class="comment">這是世康做的超爛網站</div>
  <a class="button" href="https://www.youtube.com/watch?v=ZsvJUh03MwI" target="_blank">點我播春日影</a>
  <div class="comment">🔊 開聲音再按按鈕！</div>
  <button class="button" onclick="playSound()">按我</button>
  <audio id="sound" src="sound.mp3"></audio>
  <audio id="jump-sound" src="jump.mp3"></audio>
  <audio id="gameover-sound" src="gameover.mp3"></audio>
  <button class="button" onclick="startGame()">開始小遊戲</button>
</div>

<div id="game-screen" style="display: none; background: white; color: black;">
  <h2>跳起來閃避障礙！</h2>
  <div id="play-area">
    <img id="character" src="character.png" />
  </div>
  <div id="score">分數: 0</div>
  <div id="high-score">最高分數: 0</div>
  <button id="restart-button">重新開始</button>
</div>

<script>
  const popup = document.getElementById('popup');
  const character = document.getElementById("character");
  const scoreDisplay = document.getElementById("score");
  const highScoreDisplay = document.getElementById("high-score");
  const restartBtn = document.getElementById("restart-button");
  const playArea = document.getElementById("play-area");

  let isJumping = false;
  let score = 0;
  let highScore = localStorage.getItem("highScore") || 0;
  highScoreDisplay.textContent = "最高分數: " + highScore;
  let gameRunning = false;
  let lastTime = 0;
  let obstacleSpeed = 5;
  let obstacleIntervalTime = 2500;
  let lastObstacleTime = 0;
  let scoreUpdateTime = 0;
  
  // 跳躍物理參數 - 限制跳躍高度不超過遊戲框
  let velocityY = 0;
  const gravity = 0.6; // 保持不變，維持拋物線效果
  const jumpStrength = 17; // 從 20 調整為 17，確保跳躍高度不超過遊戲框

  function enterSite() {
    document.getElementById("intro-screen").style.display = "none";
    document.getElementById("main-content").style.display = "flex";
    popup.style.display = 'block';
    setTimeout(() => popup.style.display = 'none', 3000);
  }

  function playSound() {
    document.getElementById('sound').play();
  }

  function startGame() {
    document.getElementById("main-content").style.display = "none";
    document.getElementById("game-screen").style.display = "flex";
    playArea.style.display = "block";
    score = 0;
    scoreDisplay.textContent = "分數: 0";
    gameRunning = true;
    obstacleSpeed = 5;
    obstacleIntervalTime = 2500;
    lastObstacleTime = 0;
    scoreUpdateTime = 0;
    lastTime = 0;
    requestAnimationFrame(gameLoop);
  }

  function gameLoop(currentTime) {
    if (!gameRunning) return;

    if (lastTime === 0) lastTime = currentTime;
    const deltaTime = currentTime - lastTime;
    lastTime = currentTime;

    // 更新跳躍邏輯
    if (isJumping) {
      let currentBottom = parseInt(character.style.bottom) || 0;
      currentBottom += velocityY * (deltaTime / 16.67); // 根據 deltaTime 調整速度
      velocityY -= gravity * (deltaTime / 16.67); // 速度受重力影響減小

      // 限制跳躍高度不超過遊戲框頂部
      const maxJumpHeight = playArea.clientHeight - character.clientHeight; // 300px - 60px = 240px
      if (currentBottom > maxJumpHeight) {
        currentBottom = maxJumpHeight;
        velocityY = 0; // 到達頂部後垂直速度歸零，開始下落
      }

      if (currentBottom <= 0) { // 落地判斷
        currentBottom = 0;
        isJumping = false;
        character.classList.remove('jumping');
        velocityY = 0;
      }
      character.style.bottom = currentBottom + "px";
    }

    // 更新分數 (每200ms增加1分)
    scoreUpdateTime += deltaTime;
    if (scoreUpdateTime >= 200) {
      score++;
      scoreDisplay.textContent = "分數: " + score;
      scoreUpdateTime = 0;

      // 每100分加速
      if (score % 100 === 0 && obstacleSpeed < 15) {
        obstacleSpeed += 1;
        obstacleIntervalTime = Math.max(500, obstacleIntervalTime - 100);
      }
    }

    // 生成障礙物
    lastObstacleTime += deltaTime;
    if (lastObstacleTime >= obstacleIntervalTime) {
      createObstacle();
      lastObstacleTime = 0;
    }

    // 更新所有障礙物位置
    updateObstacles(deltaTime);

    requestAnimationFrame(gameLoop);
  }
  function jump() {
    if (isJumping) return;
    isJumping = true;
    character.classList.add('jumping');
    document.getElementById("jump-sound").play();
    velocityY = jumpStrength; // 賦予初始跳躍速度
  }
  // 障礙物類型定義
  const obstacleTypes = [
    { width: 40, height: 60, color: '#ff6b6b', type: 'normal' },
    { width: 30, height: 75, color: '#ff4757', type: 'tall' },
    { width: 60, height: 40, color: '#ff3838', type: 'wide' },
    { width: 25, height: 85, color: '#ff2f2f', type: 'super_tall' } // 高度從 100 調整為 85
  ];

  function createObstacle() {
    if (!gameRunning) return;
    
    // 使用權重控制生成機率
    const weightedObstacleTypes = [
      ...Array(5).fill(obstacleTypes[0]), // normal 5倍機率
      ...Array(3).fill(obstacleTypes[1]), // tall 3倍機率
      ...Array(4).fill(obstacleTypes[2]), // wide 4倍機率
      obstacleTypes[3] // super_tall 1倍機率
    ];
    const obstacleType = weightedObstacleTypes[Math.floor(Math.random() * weightedObstacleTypes.length)];
    
    const obstacle = document.createElement("div");
    obstacle.classList.add("obstacle");
    obstacle.style.width = obstacleType.width + "px";
    obstacle.style.height = obstacleType.height + "px";
    obstacle.style.backgroundColor = obstacleType.color;
    obstacle.style.left = "800px";
    obstacle.dataset.type = obstacleType.type;
    obstacle.dataset.speed = obstacleSpeed;
    
    playArea.appendChild(obstacle);
  }

  function updateObstacles(deltaTime) {
    const obstacles = document.querySelectorAll('.obstacle');
    obstacles.forEach(obstacle => {
      let currentLeft = parseInt(obstacle.style.left);
      const speed = parseFloat(obstacle.dataset.speed);
      
      // 根據 deltaTime 計算新位置
      const newLeft = currentLeft - (speed * deltaTime / 16.67); // 16.67ms ≈ 60fps
      obstacle.style.left = newLeft + "px";
      
      // 移除離開螢幕的障礙物
      if (newLeft < -100) {
        obstacle.remove();
        return;
      }
      
      // 優化的碰撞檢測（提高容錯率）
      const charBottom = parseInt(character.style.bottom.replace("px", "")) || 0;
      const obstacleHeight = parseInt(obstacle.style.height);
      const obstacleWidth = parseInt(obstacle.style.width);
      
      // 更寬容的碰撞檢測（允許角色稍微擦過障礙物頂部）
      if (newLeft < 110 && newLeft > 30 && charBottom < obstacleHeight - 3) {
        // 添加碰撞視覺效果
        character.classList.add('collision');
        obstacle.classList.add('hit');
        
        setTimeout(() => {
          character.classList.remove('collision');
        }, 500);
        
        gameOver();
      }
    });
  }



  function gameOver() {
    gameRunning = false;
    document.getElementById("gameover-sound").play();
    restartBtn.style.display = "block";
    if (score > highScore) {
      highScore = score;
      localStorage.setItem("highScore", highScore);
      highScoreDisplay.textContent = "最高分數: " + highScore;
      alert("新紀錄！你的分數是：" + score);
    } else {
      alert("遊戲結束！你的分數是：" + score);
    }
  }

  restartBtn.onclick = () => {
    // 移除所有障礙物
    document.querySelectorAll('.obstacle').forEach(o => o.remove());

    // 重設角色位置和跳躍狀態
    character.style.bottom = "0px";
    character.classList.remove('jumping');
    isJumping = false;
    velocityY = 0;

    // 重設分數和遊戲狀態
    score = 0;
    scoreDisplay.textContent = "分數: 0";
    obstacleSpeed = 5;
    obstacleIntervalTime = 2500;
    lastObstacleTime = 0;
    scoreUpdateTime = 0;
    lastTime = 0;

    // 隱藏重新開始按鈕
    restartBtn.style.display = "none";

    // 重新開始遊戲
    gameRunning = true;
    requestAnimationFrame(gameLoop);
  };

  window.addEventListener("click", () => {
    if (gameRunning) {
      jump();
    }
  });
</script>
</body>
</html>

